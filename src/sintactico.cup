package Tiny;

import java_cup.runtime.*;
import ast.*;
//import otros.*;

parser code {:

/***********
SymbolFactory es una nueva caracteristica que ha sido anadida a las version 11a de cup, la cual facilita la implementacion de clases Symbol personalizadas
, esto debido a que dicha clase no provee mucha informacion de contexto que podria ser util para el analisis semantico o ayudar en la construccion del AST
Mas informacion en: http//4thmouse.com/index.php/2007/02/15/using-custom-symbols-in-cup/
***********/
	public static void main(String args[]) throws Exception {
		SymbolFactory sf = new DefaultSymbolFactory();
		parser parser_obj;
		if (args.length==0) 
			parser_obj=new parser(new Scanner(System.in,sf),sf);
		else 
			parser_obj=new parser(new Scanner(new java.io.FileInputStream(args[0]),sf),sf);

		parser_obj.parse();
		NodoBase root=parser_obj.action_obj.getASTroot();
		System.out.println();
		System.out.println("IMPRESION DEL AST GENERADO");
		System.out.println();
		ast.Util.imprimirAST(root);
		TablaSimbolos ts = new TablaSimbolos();
		ts.cargarTabla(root);
		ts.ImprimirClaves();
		Tiny.Generador.setTablaSimbolos(ts);
		Tiny.Generador.generarCodigoObjeto(root);
	}

:}

action code {:
	private boolean debug=true;
	private NodoBase ast=null;
	private int lineanum=0;
	
	//Debe ser llamada solo despues de un parse(), en caso contrario retornara null siempre;
	public NodoBase getASTroot(){
		return ast;
	}
	
:}

/* Simbolos Terminales */

terminal IF;
terminal THEN;
terminal ELSE;
terminal END;
terminal REPEAT;
terminal UNTIL;
terminal READ;
terminal WRITE;
terminal String ID;
terminal String NUM;
terminal ASSIGN;
terminal EQ;
terminal LT;
terminal PLUS;
terminal MINUS;
terminal TIMES;
terminal OVER;
terminal LPAREN;
terminal RPAREN;
terminal SEMI;
terminal ARRAY;
terminal LCOR;
terminal RCOR;
terminal SIZE;
terminal WHILE;
terminal ENDWHILE;
terminal FOR;
terminal ENDFOR;
terminal MI;
terminal GT;
terminal MAI;
terminal DIS;
terminal DISY;
terminal CONJ;
terminal NEG;
terminal MODULO;
terminal COMMA;
TERMINAL INT;
TERMINAL BOOL;

/* Simbolos No Terminales */
non terminal program;
non terminal NodoBase stmt_seq;
non terminal NodoBase stmt;
non terminal NodoBase if_stmt;
non terminal NodoBase repeat_stmt;
non terminal NodoBase assign_stmt;
non terminal NodoBase read_stmt;
non terminal NodoBase write_stmt;
non terminal NodoBase exp_log;
non terminal NodoBase exp_not;
non terminal NodoBase exp;
non terminal NodoBase simple_exp;
non terminal NodoBase term;
non terminal NodoBase factor;
non terminal NodoBase array_stmt;
non terminal NodoBase array_var;
non terminal NodoBase while_stmt;
non terminal NodoBase for_stmt;
non terminal NodoBase decl_stmt;
non terminal NodoBase ids_seq; /*Recursivo*/
non terminal var_type;



/* Precedencia de operadores NO USAR FALLA  
precedence left PLUS;
precedence left MINUS;
precedence left TIMES;
*/

/* REGLAS GRAMATICALES */
program     ::= stmt_seq:s	{: if(debug) System.out.println("\t regla 1"); 
					ast = s;
					:}
		;

stmt_seq    ::= stmt_seq:ini SEMI stmt:sent	{: if(debug) System.out.println("\t regla 2a"); 
						NodoBase hijoActual = ini;
						if(hijoActual !=null){
							while(hijoActual.TieneHermano()){
								hijoActual = hijoActual.getHermanoDerecha();
							}
							hijoActual.setHermanoDerecha(sent);
							RESULT=ini;
						}else{
							RESULT=sent;
						}
						:}
            | stmt:sent	{: if(debug) System.out.println("\t regla 2b"); 
				RESULT=sent;				
				:}
		;

stmt        ::= if_stmt:sif	{: if(debug) System.out.println("\t regla 3a"); 
					RESULT=sif;
					:}
            | repeat_stmt:srep	{: if(debug) System.out.println("\t regla 3b"); 
						RESULT=srep;
						:}
			| while_stmt:swhil	{: if(debug) System.out.println("\t regla 3c"); 
						RESULT=swhil;
						:}
			| for_stmt:sfor	{: if(debug) System.out.println("\t regla 3h"); 
						RESULT=sfor;
						:}
            | assign_stmt:sasi	{: if(debug) System.out.println("\t regla 3c"); 
						RESULT=sasi;
						:}
            | read_stmt:slec	{: if(debug) System.out.println("\t regla 3d"); 
					RESULT=slec;
					:}
            | write_stmt:sesc	{: if(debug) System.out.println("\t regla 3e"); 
					RESULT=sesc;
					:}
			| array_stmt:sarr	{:
					RESULT = sarr;
			:}
			| array_var:sarr_var	{:
					RESULT = sarr_var;
			:}
			| decl_stmt:dsms   {:  if   (debug)  System.out.println("\t regla 3g");
          RESULT = dsms;
	        :}
            | error	{: if(debug) System.out.println("\t regla 3f"); 
				System.out.println("Ocurrio error en cup # 0004");
				RESULT=null;
				:}
            ;
            
decl_stmt  ::=  var_type:type ids_seq:seq {: System.out.println("\t Seteando tipos a variables" + type.toString());
          //NodoIdentificador nodo = (NodoIdentificador)seq;
          //nodo.setTipo(type.toString());
          
          NodoBase hijoActual = seq;
          NodoBase siguiente = new NodoIdentificador();
          
          if(hijoActual != null){
            while(hijoActual.TieneHermano()){
              hijoActual = hijoActual.getHermanoDerecha();
              System.out.println("Hola");
            }
            
            hijoActual.setHermanoDerecha(siguiente);
            RESULT = siguiente;
            
          }else{
            RESULT=seq;
          }
        :}
      ;
      
var_type ::=  BOOL {: if(debug) System.out.println("\t");
          System.out.println("Tipo de variables booleanas"); 
          RESULT = "booleano";
        :}
      |  INT  {:
          System.out.println("Tipo de variables enteras"); 
          RESULT = "entero";
        :}
      ;
    
ids_seq   ::=  ids_seq:sec COMMA ID:variable  {: System.out.println("\t Genera id y coma");
          RESULT = new NodoIdentificador(variable.toString());
        :}
      | ID:variable {: if(debug) System.out.println("\t Genera id individual"); 
          RESULT = new NodoIdentificador (variable.toString());
        :}
      ;

if_stmt     ::= IF exp_log:ex THEN stmt_seq:pthen END	{: if(debug) System.out.println("\t regla 4a"); 
		RESULT = new NodoIf(ex,pthen);
		:}
		| IF exp_log:ex THEN stmt_seq:pthen ELSE stmt_seq:pelse END	{: if(debug) System.out.println("\t regla 4b"); 
		RESULT = new NodoIf(ex,pthen,pelse);		
		:}
		;

repeat_stmt ::= REPEAT stmt_seq:cuerpo UNTIL exp_log:prueba	{: if(debug) System.out.println("\t regla 5"); 
							RESULT = new NodoRepeat(cuerpo,prueba);
							:}
		;
while_stmt ::= WHILE exp_log:prueba THEN stmt_seq:cuerpo ENDWHILE {: if(debug) System.out.println("\t regla 5b");
							RESULT = new NodoWhile(cuerpo,prueba);
							:}
		;
		
for_stmt ::= FOR assign_stmt:asignap SEMI exp_log:prueba SEMI assign_stmt:asignat SEMI THEN stmt_seq:cuerpo ENDFOR {: if(debug) System.out.println("\t regla 5b");
							RESULT = new NodoFor(asignap,prueba,asignat,cuerpo);
							:}
		;

assign_stmt ::= ID:variable 	{: if(debug) System.out.println("\t regla 6 parte del medio"); 
				/*lineanum=1000; //Pasar/Obtener la linea correcta por el Simbolo
				String nombre = variable.getName();*/
				:}
			ASSIGN exp_log:ex	{: if(debug) System.out.println("\t regla 6 parte final");
					if(variable!=null)
					RESULT = new NodoAsignacion(variable.toString(),ex);
					else{
					RESULT = null;
					System.out.println("Ocurrio error en cup # 0001");
					}
					:}
			| array_var:variable ASSIGN simple_exp:exp {:
				if(debug) System.out.println("\t consegui esta checla");
			:}	
		;

read_stmt   ::= READ ID:variable	{: if(debug) System.out.println("\t regla 7"); 
					System.out.println("Leyendo Variable");
					if(variable!=null)
					RESULT = new NodoLeer(variable.toString());
					else{
					RESULT = null;
					System.out.println("Ocurrio error en cup # 0002");
					}
					:}
		;

write_stmt  ::= WRITE exp_log:ex	{: if(debug) System.out.println("\t regla 8"); 
					RESULT= new NodoEscribir(ex);
					:}
		;
		
array_stmt	::= ARRAY ID:variable SIZE exp_log:exp	{:
					if(debug) System.out.println("\t regla Array"); 
					RESULT = new NodoArray(new NodoIdentificador(variable.toString()), exp);
				:}
		;

array_var	::= ID:variable LCOR exp_log:exp RCOR {:
					if(debug) System.out.println("\t regla Array variable"); 
					RESULT = new NodoIdentificadorArray(variable.toString(), exp);
				:}
		;
exp_log		::=	exp_not:exI CONJ exp_log:exD  {: if(debug) System.out.println("\t	regla 8Pa");
								RESULT = new NodoOperacion(exI,tipoOp.conj,exD);
								:}
		| exp_not:exI DISY exp_log:exD {: if(debug) System.out.println("\t	regla 8Pb");
							RESULT = new NodoOperacion(exI,tipoOp.disy,exD);
							:}
		| exp_not:exn {: if(debug) System.out.println("\t	regla 8Pc");
							RESULT =exn;
							:}
		;
exp_not		::=	NEG exp_not:exD {:	if(debug) System.out.println("\t		regla 9Pa");
							RESULT= new NodoOperacionUnaria(tipoOp.neg,exD);
								:}
		| exp:ex {: if(debug) System.out.println("\t	regla 8Pc");
							RESULT =ex;
							:}
		;
exp         ::= simple_exp:exI LT simple_exp:exD	{: if(debug) System.out.println("\t regla 9a"); 
								RESULT = new NodoOperacion(exI,tipoOp.menor,exD);
								:} 
		| simple_exp:exI EQ simple_exp:exD	{: if(debug) System.out.println("\t regla 9b"); 
							RESULT = new NodoOperacion(exI,tipoOp.igual,exD);
							:}
		| simple_exp:exI MI simple_exp:exD	{: if(debug) System.out.println("\t regla 9d"); 
							RESULT = new NodoOperacion(exI,tipoOp.mi,exD);
							:}
		| simple_exp:exI GT simple_exp:exD	{: if(debug) System.out.println("\t regla 9f"); 
							RESULT = new NodoOperacion(exI,tipoOp.gt,exD);
							:}
		| simple_exp:exI MAI simple_exp:exD	{: if(debug) System.out.println("\t regla 9e"); 
							RESULT = new NodoOperacion(exI,tipoOp.mai,exD);
							:}
		| simple_exp:exI DIS simple_exp:exD	{: if(debug) System.out.println("\t regla 9g"); 
							RESULT = new NodoOperacion(exI,tipoOp.dis,exD);
							:}
		| simple_exp:ex	{: if(debug) System.out.println("\t regla 9c"); 
					RESULT = ex;
					:}
		;

simple_exp  ::= simple_exp:exI PLUS term:exD	{: if(debug) System.out.println("\t regla 10a"); 
							RESULT = new NodoOperacion(exI,tipoOp.mas,exD);
							:}
		| simple_exp:exI MINUS term:exD	{: if(debug) System.out.println("\t regla 10b"); 
							RESULT = new NodoOperacion(exI,tipoOp.menos,exD);
							:}
		| term:ex	{: if(debug) System.out.println("\t regla 10c"); 
				RESULT=ex;
				:}
		;

term        ::= term:exI TIMES factor:exD	{: if(debug) System.out.println("\t regla 11a"); 
							RESULT = new NodoOperacion(exI,tipoOp.por,exD);
							:}
		| term:exI OVER factor:exD	{: if(debug) System.out.println("\t regla 11b"); 
						RESULT = new NodoOperacion(exI,tipoOp.entre,exD);
						:}

		| term:exI MODULO factor:exD	  {: if(debug) System.out.println("\t regla 11c"); 
						RESULT = new NodoOperacion(exI,tipoOp.modulo,exD);
						:}
						
		| factor:ex	{: if(debug) System.out.println("\t regla 11c"); 
					RESULT=ex;
					:}
		;

factor      ::= LPAREN exp:ex RPAREN	{: if(debug) System.out.println("\t regla 12a"); 
							RESULT = ex;
							:}
		| NUM:valor	{: if(debug) System.out.println("\t regla 12b"); 
					System.out.println("Devolvi nodo numero entero");
					if(valor!=null){
						RESULT= new NodoValor(valor.toString());					
					}else{
						RESULT = null;
						System.out.println("Ocurrio error en cup # 0005");
					}
					:}
		| ID:variable	{: if(debug) System.out.println("\t regla 12c"); 
					if(variable!=null){
						System.out.println("Construyendo Nodo ID para Lexema: "+ variable.toString());
						RESULT= new NodoIdentificador(variable.toString());		
					}else{
						RESULT = null;
						System.out.println("Ocurrio error en cup # 0005");
					}
					:}
		| error	{: if(debug) System.out.println("\t regla 12d"); 
				System.out.println("Ocurrio error en cup # 0003");
				RESULT=null;
				:}
		;